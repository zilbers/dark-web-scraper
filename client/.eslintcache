[{"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\App.js":"1","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\reportWebVitals.js":"2","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\index.js":"3","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\AppBar.js":"4","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useDebouncedSearch.js":"5","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\LineChart.js":"6","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\PieChart.js":"7","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\CheckBox.js":"8","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Bins.js":"9","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useLogsSearch.js":"10","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Input.js":"11"},{"size":2462,"mtime":1606948004687,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1606830329518,"results":"14","hashOfConfig":"13"},{"size":517,"mtime":1606830329517,"results":"15","hashOfConfig":"13"},{"size":9175,"mtime":1606948347187,"results":"16","hashOfConfig":"13"},{"size":1033,"mtime":1606855769349,"results":"17","hashOfConfig":"13"},{"size":1448,"mtime":1606925153480,"results":"18","hashOfConfig":"13"},{"size":4918,"mtime":1606949505888,"results":"19","hashOfConfig":"13"},{"size":752,"mtime":1606907454649,"results":"20","hashOfConfig":"13"},{"size":5056,"mtime":1606948049420,"results":"21","hashOfConfig":"13"},{"size":1120,"mtime":1606924676516,"results":"22","hashOfConfig":"13"},{"size":972,"mtime":1606948915036,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tsvsmo",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\App.js",[],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\reportWebVitals.js",[],["52","53"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\index.js",[],["54","55"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\AppBar.js",["56","57"],"import React from 'react';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport WorkOffIcon from '@material-ui/icons/WorkOff';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function PrimarySearchAppBar({\r\n  length,\r\n  deleted,\r\n  setHiding,\r\n  setInputText,\r\n  inputText,\r\n}) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [scraperStatus, setScraperStatus] = React.useState({\r\n    message: 'Waiting for update!',\r\n    active: false,\r\n  });\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const checkStatus = async () => {\r\n    const { data: results } = await axios.get('/api/data/_status');\r\n    console.log(results);\r\n    setScraperStatus(\r\n      results.message\r\n        ? results\r\n        : { message: 'Something is wrong', active: false }\r\n    );\r\n  };\r\n\r\n  const showAll = async () => {\r\n    axios.post('/api/user/_alerts', []);\r\n    setHiding([]);\r\n  };\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>\r\n        Scraper Status:{' '}\r\n        <span\r\n          style={{\r\n            background: scraperStatus.active ? 'green' : 'red',\r\n            padding: '5px',\r\n            fontWeight: 600,\r\n          }}\r\n        >\r\n          {scraperStatus.message}\r\n        </span>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton aria-label='show 4 new mails' color='inherit'>\r\n          <Badge badgeContent={4} color='secondary'>\r\n            <MailIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton aria-label='show 11 new notifications' color='inherit'>\r\n          <Badge badgeContent={11} color='secondary'>\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          aria-label='account of current user'\r\n          aria-controls='primary-search-account-menu'\r\n          aria-haspopup='true'\r\n          color='inherit'\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      checkStatus();\r\n    }, 15000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge='start'\r\n            className={classes.menuButton}\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant='h6' noWrap>\r\n            Dark-Web-Scraper\r\n          </Typography>\r\n          {/* <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder='Search…'\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={({ target }) => {\r\n                setInputText(target.value);\r\n              }}\r\n              value={inputText}\r\n            />\r\n          </div> */}\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              aria-label='new entries'\r\n              color='inherit'\r\n              onClick={showAll}\r\n            >\r\n              <Badge badgeContent={deleted} color='secondary'>\r\n                <ReplayIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton aria-label='new entries' color='inherit'>\r\n              <Badge badgeContent={length} color='secondary'>\r\n                <NewReleasesIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              edge='end'\r\n              aria-label='Scraper status'\r\n              aria-controls={menuId}\r\n              aria-haspopup='true'\r\n              onClick={handleProfileMenuOpen}\r\n              color='inherit'\r\n            >\r\n              {scraperStatus.active ? (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      background: 'green',\r\n                      display: 'flex',\r\n                      padding: '5px',\r\n                    }}\r\n                  >\r\n                    <WorkIcon />\r\n                    {'  '}\r\n                    on\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      background: 'red',\r\n                      display: 'flex',\r\n                      padding: '5px',\r\n                    }}\r\n                  >\r\n                    <WorkOffIcon /> {'  '}\r\n                    off\r\n                  </div>\r\n                </>\r\n              )}\r\n            </IconButton>\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label='show more'\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup='true'\r\n              onClick={handleMobileMenuOpen}\r\n              color='inherit'\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useDebouncedSearch.js",[],["58","59"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\LineChart.js",["60","61"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  YAxis,\r\n  XAxis,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  flex-grow: 1;\r\n  @media (max-width: 750px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media (min-width: 750px) {\r\n    width: 70%;\r\n  }\r\n\r\n  @media (min-width: 900px) {\r\n    width: 40%;\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n    width: 600px;\r\n  }\r\n`;\r\n\r\nfunction Chart({ url, type, data }) {\r\n  const [binsData, setBinsData] = useState(undefined);\r\n\r\n  async function getAndSet(url, dataToAnalyze, setter) {\r\n    const { data } = await axios.post(url, dataToAnalyze);\r\n    data.sort((item) => -item[type]);\r\n    setter(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAndSet(url, data, setBinsData);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h3>By-{type}</h3>\r\n\r\n        <ResponsiveContainer width='100%' aspect={4.0 / 3.0} maxHeight={300}>\r\n          <LineChart\r\n            data={binsData}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n          >\r\n            <Line type='monotone' dataKey={type} stroke='black' />\r\n            <CartesianGrid stroke='#ccc' />\r\n            <XAxis />\r\n            <YAxis dataKey={type} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\PieChart.js",["62","63","64"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\CheckBox.js",[],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Bins.js",["65","66","67"],"import React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport useLogsSearch from '../hooks/useLogsSearch';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styled, { css } from 'styled-components';\r\nimport Input from './Input';\r\nimport axios from 'axios';\r\nimport './Bins.css';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    maxHeight: 250,\r\n  },\r\n  root: {\r\n    flexGgrow: 2,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'header', label: 'Header', minWidth: 170 },\r\n  { id: 'content', label: 'Content', minWidth: 100 },\r\n  {\r\n    id: 'author',\r\n    label: 'Author',\r\n    minWidth: 90,\r\n  },\r\n  {\r\n    id: 'date',\r\n    label: 'Date',\r\n    minWidth: 100,\r\n  },\r\n];\r\n\r\nconst OptionsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default function Bins({ hiding, setHiding }) {\r\n  // const [showing, setShowing] = useState();\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [search, setSearch] = useState(() => '');\r\n  const [sort, setSort] = useState(() => '');\r\n\r\n  const { logs, hasMore, loading, error } = useLogsSearch(\r\n    pageNumber,\r\n    search,\r\n    sort\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const observer = useRef();\r\n\r\n  const lastLogElementRef = useCallback(\r\n    (node) => {\r\n      if (loading) return;\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting && hasMore) {\r\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n        }\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [loading, hasMore]\r\n  );\r\n\r\n  const handleClose = async (index) => {\r\n    setHiding((old) => [...old, index]);\r\n    axios.post('/api/user/_alerts', [...hiding, index]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <OptionsContainer>\r\n        {/* <Select\r\n          options={sortingOptions}\r\n          currentChosenOpttion={sort}\r\n          setOption={setSort}\r\n          select='Sort'\r\n        /> */}\r\n        <Input\r\n          value={search}\r\n          setValue={setSearch}\r\n          label='Search'\r\n          setPage={setPageNumber}\r\n        />\r\n      </OptionsContainer>\r\n\r\n      <Paper className={classes.root}>\r\n        <TableContainer className={classes.container}>\r\n          <Table stickyHeader aria-label='sticky table'>\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    {column.label}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {logs &&\r\n                logs\r\n                  .sort(function (a, b) {\r\n                    // Turn your strings into dates, and then subtract them\r\n                    // to get a value that is either negative, positive, or zero.\r\n                    return new Date(b.date) - new Date(a.date);\r\n                  })\r\n                  .map((bin, index) =>\r\n                    !hiding.includes(index) ? (\r\n                      logs.length === index + 1 ? (\r\n                        <TableRow\r\n                          ref={lastLogElementRef}\r\n                          onClick={() => handleClose(index)}\r\n                          key={bin.header}\r\n                          className='tr'\r\n                        >\r\n                          <TableCell>{bin.header}</TableCell>\r\n                          <TableCell>{bin.content}</TableCell>\r\n                          <TableCell>{bin.author}</TableCell>\r\n                          <TableCell>{bin.date}</TableCell>\r\n                        </TableRow>\r\n                      ) : (\r\n                        <TableRow\r\n                          key={bin.header}\r\n                          onClick={() => handleClose(index)}\r\n                          className='tr'\r\n                        >\r\n                          <TableCell>{bin.header}</TableCell>\r\n                          <TableCell>{bin.content}</TableCell>\r\n                          <TableCell>{bin.author}</TableCell>\r\n                          <TableCell>{bin.date}</TableCell>\r\n                        </TableRow>\r\n                      )\r\n                    ) : (\r\n                      ''\r\n                    )\r\n                  )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <div>{loading && 'Loading...'}</div>\r\n      <div>{error && 'Error'}</div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useLogsSearch.js",[],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Input.js",["68","69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":7,"column":8,"nodeType":"79","messageId":"80","endLine":7,"endColumn":17},{"ruleId":"77","severity":1,"message":"81","line":12,"column":8,"nodeType":"79","messageId":"80","endLine":12,"endColumn":18},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},{"ruleId":"77","severity":1,"message":"84","line":11,"column":18,"nodeType":"79","messageId":"80","endLine":11,"endColumn":21},{"ruleId":"85","severity":1,"message":"86","line":43,"column":6,"nodeType":"87","endLine":43,"endColumn":8,"suggestions":"88"},{"ruleId":"77","severity":1,"message":"89","line":7,"column":3,"nodeType":"79","messageId":"80","endLine":7,"endColumn":7},{"ruleId":"77","severity":1,"message":"90","line":8,"column":3,"nodeType":"79","messageId":"80","endLine":8,"endColumn":8},{"ruleId":"85","severity":1,"message":"91","line":174,"column":6,"nodeType":"87","endLine":174,"endColumn":25,"suggestions":"92"},{"ruleId":"77","severity":1,"message":"93","line":1,"column":48,"nodeType":"79","messageId":"80","endLine":1,"endColumn":57},{"ruleId":"77","severity":1,"message":"84","line":11,"column":18,"nodeType":"79","messageId":"80","endLine":11,"endColumn":21},{"ruleId":"77","severity":1,"message":"94","line":51,"column":16,"nodeType":"79","messageId":"80","endLine":51,"endColumn":23},{"ruleId":"77","severity":1,"message":"95","line":2,"column":36,"nodeType":"79","messageId":"80","endLine":2,"endColumn":41},{"ruleId":"77","severity":1,"message":"84","line":4,"column":18,"nodeType":"79","messageId":"80","endLine":4,"endColumn":21},{"ruleId":"96","severity":2,"message":"97","line":31,"column":13,"nodeType":"98","messageId":"99","endLine":31,"endColumn":39},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.",["100"],["101"],"'css' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'getAndSet', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["102"],"'Cell' is defined but never used.","'Label' is defined but never used.","React Hook useEffect has missing dependencies: 'getAndSet' and 'url'. Either include them or remove the dependency array.",["103"],"'useEffect' is defined but never used.","'setSort' is assigned a value but never used.","'Theme' is defined but never used.","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [data, getAndSet, url]",{"range":"108","text":"109"},"Update the dependencies array to be: [wordList, showing, getAndSet, url]",{"range":"110","text":"111"},[870,872],"[data, getAndSet, url]",[3875,3894],"[wordList, showing, getAndSet, url]"]