[{"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\App.js":"1","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\reportWebVitals.js":"2","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\index.js":"3","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\AppBar.js":"4","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useDebouncedSearch.js":"5","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\LineChart.js":"6","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\PieChart.js":"7","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\CheckBox.js":"8","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Bins.js":"9","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useLogsSearch.js":"10","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Input.js":"11"},{"size":2493,"mtime":1606979801509,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1606830329518,"results":"14","hashOfConfig":"13"},{"size":517,"mtime":1606830329517,"results":"15","hashOfConfig":"13"},{"size":9286,"mtime":1606981607024,"results":"16","hashOfConfig":"13"},{"size":1033,"mtime":1606855769349,"results":"17","hashOfConfig":"13"},{"size":1448,"mtime":1606925153480,"results":"18","hashOfConfig":"13"},{"size":4918,"mtime":1606949758673,"results":"19","hashOfConfig":"13"},{"size":752,"mtime":1606907454649,"results":"20","hashOfConfig":"13"},{"size":5056,"mtime":1606948049420,"results":"21","hashOfConfig":"13"},{"size":1120,"mtime":1606924676516,"results":"22","hashOfConfig":"13"},{"size":1002,"mtime":1606949831477,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tsvsmo",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\App.js",[],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\reportWebVitals.js",[],["53","54"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\index.js",[],["55","56"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\AppBar.js",["57","58","59"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useDebouncedSearch.js",[],["60","61"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\LineChart.js",["62","63"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  YAxis,\r\n  XAxis,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  flex-grow: 1;\r\n  @media (max-width: 750px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media (min-width: 750px) {\r\n    width: 70%;\r\n  }\r\n\r\n  @media (min-width: 900px) {\r\n    width: 40%;\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n    width: 600px;\r\n  }\r\n`;\r\n\r\nfunction Chart({ url, type, data }) {\r\n  const [binsData, setBinsData] = useState(undefined);\r\n\r\n  async function getAndSet(url, dataToAnalyze, setter) {\r\n    const { data } = await axios.post(url, dataToAnalyze);\r\n    data.sort((item) => -item[type]);\r\n    setter(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAndSet(url, data, setBinsData);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h3>By-{type}</h3>\r\n\r\n        <ResponsiveContainer width='100%' aspect={4.0 / 3.0} maxHeight={300}>\r\n          <LineChart\r\n            data={binsData}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n          >\r\n            <Line type='monotone' dataKey={type} stroke='black' />\r\n            <CartesianGrid stroke='#ccc' />\r\n            <XAxis />\r\n            <YAxis dataKey={type} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\PieChart.js",["64","65","66"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Pie,\r\n  PieChart,\r\n  ResponsiveContainer,\r\n  Cell,\r\n  Label,\r\n  Sector,\r\n} from 'recharts';\r\nimport styled from 'styled-components';\r\nimport CheckBox from './CheckBox';\r\nimport Input from './Input';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  @media (max-width: 750px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media (min-width: 750px) {\r\n    width: 70%;\r\n  }\r\n\r\n  @media (min-width: 900px) {\r\n    width: 40%;\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n    width: 600px;\r\n  }\r\n`;\r\n\r\nconst OptionsContainer = styled.div`\r\n  align-self: center;\r\n  @media (max-width: 750px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media (min-width: 750px) {\r\n    width: 70%;\r\n  }\r\n\r\n  @media (min-width: 900px) {\r\n    width: 40%;\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n    width: 300px;\r\n  }\r\n`;\r\nconst COLORS = [\r\n  '#0088FE',\r\n  '#00C49F',\r\n  '#FFBB28',\r\n  '#FF8042',\r\n  '#AAAAAA',\r\n  '#800080',\r\n];\r\n\r\nconst renderActiveShape = (props) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n    label,\r\n  } = props;\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? 'start' : 'end';\r\n\r\n  return (\r\n    <g key={payload.name}>\r\n      <text x={cx} y={cy} dy={8} textAnchor='middle' fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={COLORS[value % COLORS.length]}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={COLORS[value % COLORS.length]}\r\n      />\r\n      <path\r\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\r\n        stroke={fill}\r\n        fill='none'\r\n      />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke='none' />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill='#333'\r\n      >{`PV ${label}`}</text>\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        dy={18}\r\n        textAnchor={textAnchor}\r\n        fill='#999'\r\n      >\r\n        {`(Rate ${(percent * 100).toFixed(2)}%)`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nfunction Chart({ url }) {\r\n  const [data, setData] = useState([]);\r\n  const [ready, setReady] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const [wordList, setWordList] = useState([]);\r\n  const [showing, setShowing] = useState(() => {\r\n    const newShowing = {};\r\n    for (const key of wordList) {\r\n      newShowing[key] = true;\r\n    }\r\n    return newShowing;\r\n  });\r\n  const [activeIndex, setActiveIndex] = useState();\r\n\r\n  async function getAndSet(url, wordList, setter) {\r\n    const newData = [];\r\n    for (const word of wordList) {\r\n      if (showing[word]) {\r\n        const { data: result } = await axios.get(`${url}?q=${word}`);\r\n        newData.push(result);\r\n      }\r\n    }\r\n    setter(newData);\r\n  }\r\n\r\n  const onPieEnter = (data, index) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setWordList((oldList) => [...oldList, input]);\r\n    setInput('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAndSet(url, wordList, setData);\r\n    setReady(true);\r\n  }, [wordList, showing]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h3>Keywords Appearance</h3>\r\n        <OptionsContainer>\r\n          <Input value={input} setValue={setInput} label='Search' />\r\n          <button onClick={handleClick}>Add</button>\r\n\r\n          <CheckBox\r\n            showing={showing}\r\n            setShowing={setShowing}\r\n            options={wordList}\r\n          />\r\n        </OptionsContainer>\r\n        {ready && (\r\n          <ResponsiveContainer width='100%' aspect={4.0 / 3.0} maxHeight={300}>\r\n            <PieChart width={730} height={250}>\r\n              <Pie\r\n                activeIndex={activeIndex}\r\n                activeShape={renderActiveShape}\r\n                data={data}\r\n                dataKey='value'\r\n                nameKey='word'\r\n                outerRadius={50}\r\n                fill='#8884d8'\r\n                onMouseEnter={onPieEnter}\r\n              ></Pie>\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\CheckBox.js",[],["67","68"],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Bins.js",["69","70","71"],"import React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport useLogsSearch from '../hooks/useLogsSearch';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styled, { css } from 'styled-components';\r\nimport Input from './Input';\r\nimport axios from 'axios';\r\nimport './Bins.css';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    maxHeight: 250,\r\n  },\r\n  root: {\r\n    flexGgrow: 2,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'header', label: 'Header', minWidth: 170 },\r\n  { id: 'content', label: 'Content', minWidth: 100 },\r\n  {\r\n    id: 'author',\r\n    label: 'Author',\r\n    minWidth: 90,\r\n  },\r\n  {\r\n    id: 'date',\r\n    label: 'Date',\r\n    minWidth: 100,\r\n  },\r\n];\r\n\r\nconst OptionsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default function Bins({ hiding, setHiding }) {\r\n  // const [showing, setShowing] = useState();\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [search, setSearch] = useState(() => '');\r\n  const [sort, setSort] = useState(() => '');\r\n\r\n  const { logs, hasMore, loading, error } = useLogsSearch(\r\n    pageNumber,\r\n    search,\r\n    sort\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const observer = useRef();\r\n\r\n  const lastLogElementRef = useCallback(\r\n    (node) => {\r\n      if (loading) return;\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting && hasMore) {\r\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n        }\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [loading, hasMore]\r\n  );\r\n\r\n  const handleClose = async (index) => {\r\n    setHiding((old) => [...old, index]);\r\n    axios.post('/api/user/_alerts', [...hiding, index]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <OptionsContainer>\r\n        {/* <Select\r\n          options={sortingOptions}\r\n          currentChosenOpttion={sort}\r\n          setOption={setSort}\r\n          select='Sort'\r\n        /> */}\r\n        <Input\r\n          value={search}\r\n          setValue={setSearch}\r\n          label='Search'\r\n          setPage={setPageNumber}\r\n        />\r\n      </OptionsContainer>\r\n\r\n      <Paper className={classes.root}>\r\n        <TableContainer className={classes.container}>\r\n          <Table stickyHeader aria-label='sticky table'>\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    {column.label}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {logs &&\r\n                logs\r\n                  .sort(function (a, b) {\r\n                    // Turn your strings into dates, and then subtract them\r\n                    // to get a value that is either negative, positive, or zero.\r\n                    return new Date(b.date) - new Date(a.date);\r\n                  })\r\n                  .map((bin, index) =>\r\n                    !hiding.includes(index) ? (\r\n                      logs.length === index + 1 ? (\r\n                        <TableRow\r\n                          ref={lastLogElementRef}\r\n                          onClick={() => handleClose(index)}\r\n                          key={bin.header}\r\n                          className='tr'\r\n                        >\r\n                          <TableCell>{bin.header}</TableCell>\r\n                          <TableCell>{bin.content}</TableCell>\r\n                          <TableCell>{bin.author}</TableCell>\r\n                          <TableCell>{bin.date}</TableCell>\r\n                        </TableRow>\r\n                      ) : (\r\n                        <TableRow\r\n                          key={bin.header}\r\n                          onClick={() => handleClose(index)}\r\n                          className='tr'\r\n                        >\r\n                          <TableCell>{bin.header}</TableCell>\r\n                          <TableCell>{bin.content}</TableCell>\r\n                          <TableCell>{bin.author}</TableCell>\r\n                          <TableCell>{bin.date}</TableCell>\r\n                        </TableRow>\r\n                      )\r\n                    ) : (\r\n                      ''\r\n                    )\r\n                  )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n      <div>{loading && 'Loading...'}</div>\r\n      <div>{error && 'Error'}</div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\hooks\\useLogsSearch.js",[],"C:\\Users\\omri_\\Documents\\GitHub\\dark-web-scraper\\client\\src\\components\\Input.js",["72","73"],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":17},{"ruleId":"80","severity":1,"message":"84","line":12,"column":8,"nodeType":"82","messageId":"83","endLine":12,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":213,"column":6,"nodeType":"87","endLine":213,"endColumn":8,"suggestions":"88"},{"ruleId":"74","replacedBy":"89"},{"ruleId":"76","replacedBy":"90"},{"ruleId":"80","severity":1,"message":"91","line":11,"column":18,"nodeType":"82","messageId":"83","endLine":11,"endColumn":21},{"ruleId":"85","severity":1,"message":"92","line":43,"column":6,"nodeType":"87","endLine":43,"endColumn":8,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":7,"column":3,"nodeType":"82","messageId":"83","endLine":7,"endColumn":7},{"ruleId":"80","severity":1,"message":"95","line":8,"column":3,"nodeType":"82","messageId":"83","endLine":8,"endColumn":8},{"ruleId":"85","severity":1,"message":"96","line":174,"column":6,"nodeType":"87","endLine":174,"endColumn":25,"suggestions":"97"},{"ruleId":"74","replacedBy":"98"},{"ruleId":"76","replacedBy":"99"},{"ruleId":"80","severity":1,"message":"100","line":1,"column":48,"nodeType":"82","messageId":"83","endLine":1,"endColumn":57},{"ruleId":"80","severity":1,"message":"91","line":11,"column":18,"nodeType":"82","messageId":"83","endLine":11,"endColumn":21},{"ruleId":"80","severity":1,"message":"101","line":51,"column":16,"nodeType":"82","messageId":"83","endLine":51,"endColumn":23},{"ruleId":"80","severity":1,"message":"102","line":2,"column":36,"nodeType":"82","messageId":"83","endLine":2,"endColumn":41},{"ruleId":"80","severity":1,"message":"91","line":4,"column":18,"nodeType":"82","messageId":"83","endLine":4,"endColumn":21},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'checkStatus'. Either include it or remove the dependency array.","ArrayExpression",["105"],["103"],["104"],"'css' is defined but never used.","React Hook useEffect has missing dependencies: 'data', 'getAndSet', and 'url'. Either include them or remove the dependency array.",["106"],"'Cell' is defined but never used.","'Label' is defined but never used.","React Hook useEffect has missing dependencies: 'getAndSet' and 'url'. Either include them or remove the dependency array.",["107"],["103"],["104"],"'useEffect' is defined but never used.","'setSort' is assigned a value but never used.","'Theme' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [checkStatus]",{"range":"114","text":"115"},"Update the dependencies array to be: [data, getAndSet, url]",{"range":"116","text":"117"},"Update the dependencies array to be: [wordList, showing, getAndSet, url]",{"range":"118","text":"119"},[6070,6072],"[checkStatus]",[870,872],"[data, getAndSet, url]",[3875,3894],"[wordList, showing, getAndSet, url]"]